name: CI/CD

# Permissions needed for creating releases and pushing tags
permissions:
  contents: write  # Needed for creating releases and pushing tags
  packages: write  # Needed for publishing packages

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.0' # Only trigger on minor releases (x.y.0)
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to npm after build'
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  publish:
    needs: build
    if: github.event.inputs.publish == 'true' || (startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '.0'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js for Publishing
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Update package.json version from tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Extract version from tag (remove 'v' prefix)
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Setting package.json version to $TAG_VERSION"
          
          # Update package.json with the tag version
          npm version $TAG_VERSION --no-git-tag-version --allow-same-version

      - name: Build (ensure fresh build)
        run: npm run build

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release:
    needs: publish
    if: startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '.0')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for generating release notes

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Create a temporary file for the changelog
          TEMP_CHANGELOG=$(mktemp)
          
          # Check if there are previous tags
          if git describe --tags --abbrev=0 HEAD^ 2>/dev/null; then
            # If there are previous tags, get changes since the last tag
            git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" > "$TEMP_CHANGELOG"
          else
            # If this is the first tag, get all changes
            git log --pretty=format:"- %s" > "$TEMP_CHANGELOG"
          fi
          
          # Set the changelog as an output using the correct multiline syntax
          echo "CHANGELOG<<CHANGELOG_DELIMITER" >> $GITHUB_OUTPUT
          cat "$TEMP_CHANGELOG" >> $GITHUB_OUTPUT
          echo "CHANGELOG_DELIMITER" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            ```
            npm install archimate-renderer
            ```
          files: |
            dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  update-version:
    needs: release
    if: startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '.0')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # Use PAT if available, otherwise fall back to GITHUB_TOKEN
          # A PAT with repo scope is needed if you have branch protection rules
          token: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: Install GitHub CLI
        run: |
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
          
          # Authenticate GitHub CLI with the token
          echo "${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      
      - name: Get current version and calculate next version
        id: version
        run: |
          # Get current version from tag (remove 'v' prefix)
          CURRENT_VERSION=${GITHUB_REF#refs/tags/v}
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Use npm semver utility to calculate next patch version
          NEXT_VERSION=$(npx semver $CURRENT_VERSION -i patch)
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update package.json to next patch version
        run: |
          # Update package.json with next version
          npm version ${{ steps.version.outputs.NEXT_VERSION }} --no-git-tag-version
      
      - name: Create branch for version update
        run: |
          # Create a new branch for the version update
          VERSION_BRANCH="version-bump-${{ steps.version.outputs.NEXT_VERSION }}"
          git checkout -b $VERSION_BRANCH
          
          # Add and commit changes
          git add package.json
          git commit -m "chore: bump version to v${{ steps.version.outputs.NEXT_VERSION }} [skip ci]"
          
          # Push the branch
          git push origin $VERSION_BRANCH
      
      - name: Create Pull Request or push directly
        id: create_pr
        # Try to create a PR first, if it fails (e.g., no branch protection), push directly
        run: |
          # Try to create a PR using GitHub CLI
          if command -v gh &> /dev/null; then
            echo "Creating PR using GitHub CLI..."
            PR_URL=$(gh pr create --title "chore: bump version to v${{ steps.version.outputs.NEXT_VERSION }}" \
                              --body "Automated version bump to v${{ steps.version.outputs.NEXT_VERSION }} after release v${{ steps.version.outputs.CURRENT_VERSION }}" \
                              --base main \
                              --head "version-bump-${{ steps.version.outputs.NEXT_VERSION }}" || echo "PR_FAILED")
            
            if [ "$PR_URL" != "PR_FAILED" ]; then
              echo "PR created: $PR_URL"
              echo "PR_CREATED=true" >> $GITHUB_OUTPUT
              echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT
            else
              echo "Failed to create PR, will try direct push"
              echo "PR_CREATED=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "GitHub CLI not available, will try direct push"
            echo "PR_CREATED=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Push directly if PR creation failed
        if: steps.create_pr.outputs.PR_CREATED != 'true'
        run: |
          # Try to push directly to main
          git checkout main
          git pull
          
          # Update version in package.json
          npm version ${{ steps.version.outputs.NEXT_VERSION }} --no-git-tag-version
          
          # Commit and push
          git add package.json
          git commit -m "chore: bump version to v${{ steps.version.outputs.NEXT_VERSION }} [skip ci]"
          git push || echo "Direct push failed, manual intervention required"
      
      - name: Create and push new tag
        run: |
          # Create tag on the current branch
          git tag v${{ steps.version.outputs.NEXT_VERSION }}
          git push origin v${{ steps.version.outputs.NEXT_VERSION }}
