name: CI/CD

# Permissions needed for creating releases and pushing tags
permissions:
  contents: write  # Needed for creating releases and pushing tags
  packages: write  # Needed for publishing packages

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.0' # Only trigger on minor releases (x.y.0)
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to npm after build'
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  publish:
    needs: build
    if: github.event.inputs.publish == 'true' || (startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '.0'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js for Publishing
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build (ensure fresh build)
        run: npm run build

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release:
    needs: publish
    if: startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '.0')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for generating release notes

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Extract changes since the last release
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            ```
            npm install @archimate/renderer
            ```
          files: |
            dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  update-version:
    needs: release
    if: startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '.0')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: Get current version and calculate next version
        id: version
        run: |
          # Get current version from tag (remove 'v' prefix)
          CURRENT_VERSION=${GITHUB_REF#refs/tags/v}
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Use npm semver utility to calculate next patch version
          NEXT_VERSION=$(npx semver $CURRENT_VERSION -i patch)
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update package.json to next patch version
        run: |
          # Update package.json with next version
          npm version ${{ steps.version.outputs.NEXT_VERSION }} --no-git-tag-version
      
      - name: Commit and push changes
        run: |
          git add package.json
          git commit -m "chore: bump version to v${{ steps.version.outputs.NEXT_VERSION }} [skip ci]"
          git push
      
      - name: Create and push new tag
        run: |
          git tag v${{ steps.version.outputs.NEXT_VERSION }}
          git push origin v${{ steps.version.outputs.NEXT_VERSION }}
